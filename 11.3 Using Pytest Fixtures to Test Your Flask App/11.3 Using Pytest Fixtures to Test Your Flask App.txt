-> Introduction To Testing Your App Lesson  
   -> Using Pytest Fixtures to Test Your Flask App  
   -> 16 min to complete · By Brandon Gigous  

-> Introduction  
   -> In this lesson, you will learn how to use Pytest fixtures to create reusable chunks of test code that can be easily used across multiple test functions in your Flask app  
   -> Fixtures allow you to set up preconditions for your tests and clean up afterwards, ensuring your tests run in a consistent, isolated environment  

-> What is a Test Fixture?  
   -> A test fixture is a piece of code that sets up a necessary environment for your tests, preparing everything your test will need before it runs  
   -> A fixture is defined as "a software test fixture sets up a system for the software testing process by initialising it, thereby satisfying any preconditions the system may have"  
   -> The primary purpose of a fixture is to make sure that your tests can execute reliably and produce consistent, repeatable results  
   -> Fixtures not only help with setting things up but also help to tear them down (i.e., clean up after the tests have run)  

-> Pytest Fixtures  
   -> Pytest fixtures are functions, but these functions are special—they must be decorated with the `@pytest.fixture` decorator  
   -> Once defined, a fixture can be injected into test functions by simply adding it as a parameter  
   -> Example:  
     ```python  
     @pytest.fixture  
     def my_list():  
         return [3, 4, 7, 8]  
     def test_3_in_list(my_list):  
         assert 3 in my_list  
     ```  
   -> In this example, `my_list()` is a fixture that returns a list of numbers. The test function `test_3_in_list()` takes `my_list` as a parameter and checks if the number 3 is in the list  
   -> Pytest automatically "injects" the fixture into the test function by matching the fixture's name to the test function's parameter  

-> How Does Pytest Know What to Do?  
   -> Pytest looks for functions decorated with `@pytest.fixture`  
   -> When a test function declares a fixture as a parameter, Pytest looks for a fixture with the matching name and passes it to the test function  
   -> The test function then uses the value returned by the fixture, as if it was defined locally within the test function  

-> Pytest Fixture Scope  
   -> The scope of a fixture controls how long the fixture lasts and how often it is set up and torn down  
   -> Scope can be defined for a fixture and can be one of the following:  
      -> Function scope: The fixture is set up and torn down once for each test function that uses it  
      -> Class scope: The fixture is set up and torn down once for each test class  
      -> Module scope: The fixture is set up and torn down once per module (i.e., once for each Python file of tests)  
      -> Session scope: The fixture is set up and torn down only once for the entire test session (i.e., across all modules)  
   -> Example of scope:  
     ```python  
     @pytest.fixture(scope="module")  
     def my_list():  
         return [3, 4, 7, 8]  
     ```  
   -> In this example, `my_list()` would be created once at the start of the test module and used in all the test functions within that module  
   -> A fixture with function scope will be re-initialised for each individual test function  

-> The `conftest.py` File  
   -> When you have multiple test files and you want to share fixtures across them, it is useful to store your fixtures in a special file called `conftest.py`  
   -> The `conftest.py` file can hold fixtures that will be accessible to all tests in the directory (and subdirectories) where `conftest.py` is located  
   -> You don’t need to explicitly import fixtures from `conftest.py`—Pytest will automatically find and use them in your tests  
   -> Example file structure:  
     ```  
     tests/  
     ├── conftest.py  # Fixtures are defined here  
     ├── test_file_1.py  
     └── test_file_2.py  
     ```  

-> Setup and Teardown  
   -> A fixture doesn’t just set up resources for your tests—it can also tear them down after the tests complete, ensuring the environment is cleaned up  
   -> This is particularly important when working with databases or files, as you want to make sure each test starts with a clean slate  
   -> You can use the `yield` keyword in your fixture to handle teardown after the test function has completed  
   -> Example of a fixture with setup and teardown:  
     ```python  
     @pytest.fixture  
     def order():  
         diner_order = DinerOrder()  # setup  
         yield diner_order  # provide the order to the test  
         diner_order.cleanup()  # teardown  
     ```  
   -> In this example, the fixture sets up the `diner_order` object and then, after the test has finished, it cleans up by calling `cleanup()`  

-> Rethinking the Database Insertion Test  
   -> Now that you've learned about fixtures, you can refactor previous database-related tests to use fixtures for setup and teardown  
   -> Example of a fixture that sets up a Flask app instance and database:  
     ```python  
     @pytest.fixture(scope='module')  
     def new_app():  
         app = create_app('testing')  
         assert 'data-test.sqlite' in app.config['SQLALCHEMY_DATABASE_URI']  
         test_client = app.test_client()  
         ctx = app.app_context()  
         ctx.push()  
         db.create_all()  # setup  
         yield test_client  # provide the app's test client to the test function  
         db.session.remove()  # teardown  
         db.drop_all()  
         ctx.pop()  
     ```  
   -> This fixture creates a Flask app for testing, sets up the database, and tears down both after the test completes  

-> Using the Fixture in Tests  
   -> After defining the `new_app` fixture, you can use it in your tests by passing it as a parameter to the test function  
   -> Example of a test function using the fixture:  
     ```python  
     def test_database_insert(new_app):  
         u = User(email='john@example.com', username='john')  
         db.session.add(u)  
         db.session.commit()  
     ```  
   -> In this example, `new_app` is passed to the test function, and Pytest injects the fixture automatically  

-> Database Insertion Test Revisited  
   -> With the new fixture, the database insertion test becomes cleaner and more efficient  
   -> The fixture takes care of setting up the app, database, and context, while the test itself focuses on inserting data into the database  

-> More Tests To Come  
   -> This is just the beginning! As you continue to build your Flask app, you'll write more tests, and using fixtures will help you keep your tests clean, organised, and reusable  
   -> A tested app is a reliable app!  

-> Summary: Pytest Fixtures  
   -> Test fixtures are functions used to set up and tear down the test environment  
   -> They can be decorated with `@pytest.fixture` and are passed automatically to test functions  
   -> Fixtures have different scopes: function, class, module, session  
   -> `conftest.py` allows fixtures to be shared across multiple test files in the same directory  
   -> Fixtures can handle both setup and teardown with `yield`  
   -> You learned how to create a fixture to set up and tear down the Flask app context and test database  
